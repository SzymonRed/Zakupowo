@model Zakupowo.Models.Cart

@{
    ViewBag.Title = "Koszyk - Zakupowo";
    // Pobierz kurs waluty i symbol waluty z sesji
    decimal exchangeRate = Session["SelectedExchangeRate"] != null ? (decimal)Session["SelectedExchangeRate"] : 1;
    string currencyCode = Session["SelectedCurrencyCode"]?.ToString() ?? "PLN";
}

<div class="cart-container">
    <h2 class="cart-header">Twój Koszyk</h2>

    @if (Model != null && Model.CartItems.Any())
    {
        <table class="cart-table">
            <thead>
                <tr>
                    <th>Produkt</th>
                    <th>Ilość</th>
                    <th>Cena</th>
                    <th>Razem</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.CartItems)
                {
                    // Przelicz ceny na podstawie kursu waluty
                    decimal priceAfterConversion = item.Product.Price * (1 / exchangeRate) * (1 + (item.Product.VatRate?.Rate ?? 0)) ;
                    decimal totalPrice = item.Quantity * priceAfterConversion;

                    <tr class="cart-item">
                        <td>@item.Product.Name</td>
                        <td>@item.Quantity</td>
                        <td>@priceAfterConversion.ToString("N2") @ViewBag.CurrencyCode</td>
                        <td>@totalPrice.ToString("N2") @ViewBag.CurrencyCode</td>
                        <td>
                            @using (Html.BeginForm("UpdateQuantity", "Cart", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken() 

                                @Html.Hidden("cartItemId", item.CartItemId)

                                <input type="number" name="quantity" value="@item.Quantity" min="1" class="quantity-input" />

                                <button type="submit" class="btn btn-primary mb-1">Zaktualizuj ilość</button>
                            }

                            @using (Html.BeginForm("RemoveFromCart", "Cart", FormMethod.Post))
                            {
                                @Html.AntiForgeryToken() 

                                @Html.Hidden("cartItemId", item.CartItemId)

                                <button type="submit" class="btn btn-danger">Usuń</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="cart-summary">
            <h3>Podsumowanie</h3>
            <p>Łączna wartość koszyka: @Model.CartItems.Sum(ci => ci.Quantity * (ci.Product.Price * (1 / exchangeRate) * (1 + (ci.Product.VatRate?.Rate ?? 0)))).ToString("N2") @ViewBag.CurrencyCode</p>
            <a href="@Url.Action("Checkout", "Cart")" class="btn btn-primary">Przejdź do kasy</a>
        </div>
    }
    else
    {
        <p class="empty-cart-message">Twój koszyk jest pusty.</p>
    }
</div>